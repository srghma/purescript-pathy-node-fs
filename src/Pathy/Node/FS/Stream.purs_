module Pathy.Node.FS.Stream where

import Effect (Effect)
import Effect.Uncurried (EffectFn1, EffectFn2, runEffectFn1, runEffectFn2)
import Node.FS (FileDescriptor)
import Node.Path (FilePath)
import Node.Stream (Readable, Writable)
import Prim.Row as Row

-- | Create a Writable stream which writes data to the specified file, using
-- | the default options.
createWriteStream :: FilePath -> Effect (Writable ())
createWriteStream f = runEffectFn1 createWriteStreamImpl f

-- | Create a Writable stream which writes data to the specified file.
-- | Unused options should not be specified. Some options
-- | (e.g. `flags`, `encoding`, and `mode`) should convert their 
-- | PureScript values to the corresponding JavaScript ones:
-- | ```
-- | filePath # createWriteStream'
-- |   { flags: fileFlagsToNode R
-- |   , encoding: encodingToNode UTF8
-- |   , mode: permsToInt Perms.all
-- |   }
-- | ```
createWriteStream'
  :: forall r trash
   . Row.Union r trash WriteStreamOptions
  => FilePath
  -> { | r }
  -> Effect (Writable ())
createWriteStream' f opts = runEffectFn2 createWriteStreamOptsImpl f opts

-- | Create a Readable stream which reads data to the specified file, using
-- | the default options.
createReadStream :: FilePath -> Effect (Readable ())
createReadStream p = runEffectFn1 createReadStreamImpl p

-- | Create a Readable stream which reads data from the specified file.
-- | Unused options should not be specified. Some options
-- | (e.g. `flags`, `encoding`, and `mode`) should convert their 
-- | PureScript values to the corresponding JavaScript ones:
-- | ```
-- | filePath # createReadStream'
-- |   { flags: fileFlagsToNode R
-- |   , encoding: encodingToNode UTF8
-- |   , mode: permsToInt Perms.all
-- |   }
-- | ```
createReadStream'
  :: forall r trash
   . Row.Union r trash ReadStreamOptions
  => FilePath
  -> { | r }
  -> Effect (Readable ())
createReadStream' path opts = runEffectFn2 createReadStreamOptsImpl path opts
